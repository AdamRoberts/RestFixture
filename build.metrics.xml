<?xml version="1.0" encoding="UTF-8"?>
<project name="RestFixture.metrics" default="all" basedir=".">

	<property file="properties/${properties}.properties" />
	<property file="properties/${user.name}.properties" />

	<target name="inherit.properties" if="inherit.properties">
		<property name="reports.dir" value="${reports}" />
		<property name="src.dir" value="${src}" />
		<property name="src.unit.dir" value="${src.unit}" />
		<property name="etc.dir" value="${etc}" />
		<property name="lib.dir" value="${lib}" />
		<property name="build.dir" value="${build}" />
	</target>

	<target name="define.properties" unless="inherit.properties">
		<echo>
Metrics build directly run - defining properties not inherited by master build file.
		</echo>
		<property name="reports.dir" value="build/reports" />
		<property name="src.dir" value="src/main/java" />
		<property name="resources.dir" value="src/main/resources" />
		<property name="src.unit.dir" value="src/test/java" />
		<property name="lib.dir" value="lib" />
		<property name="etc.dir" value="etc" />
		<property name="build.dir" value="build" />
		<path id="project.classpath">
			<pathelement location="${resources.dir}" />
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
				<exclude name="**/metrics/**/*.jar" />
			</fileset>
		</path>
		<path id="test.classpath">
			<path refid="project.classpath" />
			<!-- this will shadow the ones in classes/main -->
			<pathelement location="${build.dir}/classes/main" />
			<pathelement location="${build.dir}/classes/unit" />
		</path>
	</target>

	<target name="define.shared.structures"
	        depends="inherit.properties, define.properties">
		<echo message="Using reports.dir: ${reports.dir}" />
		<echo message="Using src.dir: ${src.dir}" />
        <echo message="Using etc.dir: ${etc.dir}" />
		<echo message="Using lib.dir: ${lib.dir}" />
		<echo message="Using build.dir: ${build.dir}" />

		<property name="metrics.lib" value="${lib.dir}/test/metrics" />
		<property name="metrics.config.dir" value="${etc.dir}/metrics" />
		<property name="build.classes.main.dir" value="${build.dir}/classes/main" />
		<property name="metrics.report.dir" value="${reports.dir}/metrics" />
		<property name="coverage.filter" value="" />

		<property name="checkstyle.report.dir" value="${metrics.report.dir}/checkstyle" />
		<property name="jdepend.report.dir" value="${metrics.report.dir}/jdepend" />
		<property name="findbugs.report.dir" location="${metrics.report.dir}/findbugs" />
		<property name="coverage.report.dir" location="${metrics.report.dir}/coverage" />
		<property name="coverage.staging.dir" location="${build.dir}/coverage-staging" />
		<property name="pmd.report.dir" location="${metrics.report.dir}/pmd" />
		<property name="cpd.report.dir" location="${metrics.report.dir}/cpd" />
		<property name="ckjm.report.dir" location="${metrics.report.dir}/ckjm" />

		<property name="coverage.enabled" value="true" />

		<path id="metrics.classpath">
			<fileset id="metrics.libs.id" dir="${metrics.lib}">
				<include name="**/*.jar" />
			</fileset>
		</path>

		<path id="lib.classpath">
			<fileset dir="${lib.dir}">
				<include name="**/*.jar" />
				<!-- captured in metrics.classpath -->
				<exclude name="**/metrics/**/*.jar" />
			</fileset>
		</path>

		<path id="coverage.test.classpath">
			<pathelement location="${coverage.staging.dir}" />
			<fileset dir="${lib.dir}">
				<include name="**/emma*.jar" />
			</fileset>
			<path refid="test.classpath" />
		</path>
	</target>

	<target name="check.findbugs" unless="skip.metric.findbugs">
		<fail unless="findbugs.home">
			Unknown findbugs home.
			Define 'findbugs.home' in your property file or run ant with -Dfindbugs.home=/path/to/findbugs.
			To skip findbugs metric run again with -Dskip.metric.findbugs=true.
		</fail>
		<available classname="edu.umd.cs.findbugs.anttask.FindBugsTask" 
			classpath="${findbugs.home}/lib/findbugs.jar" property="findbugs.home.properly.set" />
		<fail unless="findbugs.home.properly.set">
			findbugs.home property does not point to a findbugs home: ${findbugs.home}			
		</fail>
	</target>
	
	<target name="check.jdepend" unless="skip.metric.jdepend">
		<path id="jdepend.lib">
			<fileset dir="${ant.home}/lib">
				<include name="jdepend*.jar" />
			</fileset>			
		</path>
		<available classname="jdepend.framework.JDepend" 
			classpathref="jdepend.lib" property="jdepend.lib.deployed" />
		<fail unless="jdepend.lib.deployed">
			jdepend lib not found.
			JDepend lib not available in ANT_HOME/lib. You need to copy jdepend-x.x.x.jar in ANT_LIB to run the jdepend metrics. 
			If you have run this target within the IDE, check what ANT_HOME your IDE is using.
			To skip the jdepend metric run again with -Dskip.metric.jdepend=true.
		</fail>
	</target>
	
	<target name="all"
	        depends="init, check.findbugs, check.jdepend, cpd, pmd, findbugs, checkstyle, jdepend, ckjm, coverage, crap4j" />

	<target name="init" depends="define.shared.structures" />

	<target name="coverage" depends="init" unless="skip.metric.coverage">
		<delete dir="${coverage.staging.dir}" />
		<mkdir dir="${coverage.staging.dir}" />
		<property name="emma.filter" value="${coverage.filter}" />

		<path id="run.classpath">
			<!-- class files we want to instrument -->
			<pathelement location="${build.classes.main.dir}" />
		</path>

		<taskdef resource="emma_ant.properties"
		         classpathref="metrics.classpath" />
		<emma enabled="true">
			<instr instrpathref="run.classpath"
			       destdir="${coverage.staging.dir}"
			       metadatafile="${coverage.staging.dir}/metadata.emma"
			       merge="true">
				<!-- note that coverage filters can be set through nested <filter>
	             elements as well: many of EMMA setting are 'mergeable' in the
	             sense that they can be specified multiple times and the result
	             is a union of all such values. Here we are not merging several
	             filters together but merely demonstrating that it is possible:
	        -->
				<filter value="${emma.filter}" />
			</instr>
		</emma>

		<junit errorproperty="test.failed" fork="false" printsummary="true">
			<classpath refid="coverage.test.classpath" />
			<batchtest fork="yes">
				<fileset dir="${src.unit.dir}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
			<jvmarg value="-Demma.coverage.out.file=${coverage.staging.dir}/coverage.emma" />
			<jvmarg value="-Demma.coverage.out.merge=true" />
		</junit>

		<delete dir="${coverage.report.dir}" />
		<mkdir dir="${coverage.report.dir}" />
		<property name="coverage.threshold.method" value="70" />
		<property name="coverage.threshold.block" value="80" />
		<property name="coverage.threshold.line" value="80" />
		<property name="coverage.threshold.class" value="100" />

		<emma enabled="true">
			<report sourcepath="${src.dir}"
			        sort="+block,+name,+method,+class"
			        metrics="method:${coverage.threshold.method},block:${coverage.threshold.block},line:${coverage.threshold.line},class:${coverage.threshold.class}">
				<!-- collect all EMMA data dumps (metadata and runtime)
                 [this can be done via nested <fileset> fileset elements
                 or <file> elements pointing to a single file]:
            -->
				<fileset dir="${coverage.staging.dir}">
					<include name="*.emma" />
				</fileset>
				<html outfile="${coverage.report.dir}/index.html"
				      depth="method"
				      columns="name,class,method,block,line" />
			</report>
		</emma>

	</target>
	
	<target name="findbugs" depends="init, check.findbugs" unless="skip.metric.findbugs">
		<delete dir="${findbugs.report.dir}" />
		<mkdir dir="${findbugs.report.dir}" />
		<path id="findbugs.classpath">
            <fileset dir="${findbugs.home}/lib">
                <include name="*.jar"/>
            </fileset>
            <fileset dir="${lib.dir}">
                <include name="**/*.jar"/>
            </fileset>
		</path>
		<taskdef name="findbugs"
		         classname="edu.umd.cs.findbugs.anttask.FindBugsTask"
		         classpathref="findbugs.classpath" />
		<findbugs home="${findbugs.home}"
		          output="html"
		          outputFile="${findbugs.report.dir}/index.html"
		          jvmargs="-Xms512M -Xmx512M "
		          excludeFilter="${metrics.config.dir}/findBugs_exclude_filters.xml">
			<sourcePath path="${src.dir}" />
			<class location="${build.classes.main.dir}" />
			<auxClasspath>
                <pathelement location="${build.dir}/classes/cat" />
	            <fileset dir="${lib.dir}">
	                <include name="**/*.jar"/>
	            </fileset>
			</auxClasspath>
		</findbugs>
	</target>

	<target name="ckjm" depends="init" unless="skip.metric.ckjm">
		<!-- Chidamber and Kemerer Java Metrics (see http://www.spinellis.gr/sw/ckjm/) -->
		<delete dir="${ckjm.report.dir}" />
		<mkdir dir="${ckjm.report.dir}" />
		<taskdef name="ckjm" classname="gr.spinellis.ckjm.ant.CkjmTask">
			<classpath>
				<pathelement location="${metrics.lib}/ckjm/ckjm-1.9.jar" />
			</classpath>
		</taskdef>
		<ckjm outputfile="${ckjm.report.dir}/ckjm.xml"
		      format="xml"
		      classdir="${build.classes.main.dir}">
			<include name="**/*.class" />
			<exclude name="**/*Test.class" />
			<extdirs refid="lib.classpath" />
		</ckjm>
		<xslt in="${ckjm.report.dir}/ckjm.xml"
		      style="${metrics.config.dir}/ckjm.xsl"
		      out="${ckjm.report.dir}/index_minimal.html" />
		<xslt in="${ckjm.report.dir}/ckjm.xml"
		      style="${metrics.config.dir}/ckjm_extra.xsl"
		      out="${ckjm.report.dir}/index.html" />
	</target>

	<target name="pmd" depends="init" unless="skip.metric.pmd">
		<delete dir="${pmd.report.dir}" />
		<mkdir dir="${pmd.report.dir}" />
		<taskdef name="pmd"
		         classname="net.sourceforge.pmd.ant.PMDTask"
		         classpathref="metrics.classpath" />
		<pmd rulesetfiles="imports,basic">
			<formatter type="html"
			           toFile="${pmd.report.dir}/index.html"
			           toConsole="true" />
			<formatter type="xml" toFile="${pmd.report.dir}/pmd.xml" />
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</pmd>
	</target>

	<target name="cpd" depends="init" unless="skip.metric.cpd">
		<delete dir="${cpd.report.dir}" />
		<mkdir dir="${cpd.report.dir}" />
		<taskdef name="cpd"
		         classname="net.sourceforge.pmd.cpd.CPDTask"
		         classpathref="metrics.classpath" />
		<cpd minimumTokenCount="4"
		     format="xml"
		     outputFile="${cpd.report.dir}/cpd.xml">
			<fileset dir="${src.dir}">
				<include name="**/*.java" />
			</fileset>
		</cpd>
		<xslt in="${cpd.report.dir}/cpd.xml"
		      style="${metrics.config.dir}/cpdhtml.xslt"
		      out="${cpd.report.dir}/index.html" />
	</target>

	<target name="jdepend" depends="init, check.jdepend" unless="skip.metric.jdepend">
		<delete dir="${jdepend.report.dir}" />
		<mkdir dir="${jdepend.report.dir}" />
		<!-- for this to work add jdepend-x.x.x.jar to your ANT_HOME/lib - note: if run in IDE, it's likely that ANT_HOME is that shipped with the IDE -->
		<jdepend outputfile="${jdepend.report.dir}/jdepend-report.xml"
		         format="xml">
			<classespath>
				<pathelement location="${build.classes.main.dir}" />
			</classespath>
		</jdepend>
		<xslt in="${jdepend.report.dir}/jdepend-report.xml"
		      out="${jdepend.report.dir}/index.html"
		      style="${metrics.config.dir}/jdepend.xsl" />
	</target>

	<target name="checkstyle"
	        unless="skip.metric.checkstyle"
	        depends="init"
	        description="Generates a report of code convention violations.">
		<delete dir="${checkstyle.report.dir}" />
		<mkdir dir="${checkstyle.report.dir}" />
		<taskdef resource="checkstyletask.properties"
		         classpathref="metrics.classpath" />
		<checkstyle config="${metrics.config.dir}/restfixture_checkstyle.xml"
		            failureProperty="checkstyle.failure"
		            failOnViolation="false"
		            classpathref="metrics.classpath">
			<formatter type="xml"
			           tofile="${checkstyle.report.dir}/checkstyle_report.xml" />
			<fileset dir="${src.dir}" includes="**/*.java" />
		</checkstyle>

		<xslt in="${checkstyle.report.dir}/checkstyle_report.xml"
		      out="${checkstyle.report.dir}/index.html"
		      style="${metrics.config.dir}/checkstyle-noframes-sorted.xsl" />
	</target>
</project>