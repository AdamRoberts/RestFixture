<project name="RestFixture" default="full" basedir=".">
	<record name="${basedir}/${ant.project.name}.build.log" loglevel="verbose" />

	<property file="properties/${user.name}.properties" />
	<property file="build.properties" />

	<property name="src.unit" value="${basedir}/src/test/java" />
	<property name="src.cat" value="${basedir}/src/test/fitnesse" />
	<property name="src" value="${basedir}/src/main/java" />
	<property name="resources" value="${basedir}/src/main/resources" />
	<property name="build" value="${basedir}/build" />
	<property name="dist" value="${basedir}/dist" />
	<property name="lib" value="${basedir}/lib" />
	<property name="reports" value="${build}/reports" />
	<property name="fitnesse.reports" value="${reports}/fitnesse" />
	<property name="fitnesse.reports.resources" value="etc/fitnesse" />
	<property name="artifacts" value="${dist}/artifacts" />

	<property name="fitnesse.path" value="${ant.project.name}Tests" />
	<property name="fitnesse.test.suite" value="${fitnesse.path}" />
	<property name="fitnesse.root.name" value="FitNesseRoot" />
	<property name="fitnesse.root" value="${fitnesse.home}/${fitnesse.root.name}" />
	<property name="fitnesse.jar" value="${lib}/fitnesse/fitnesse.jar" />
	<property name="restfixture.jar" value="${build}/${ant.project.name}.jar" />
	<property name="restfixture.fitnesse.jar" value="${build}/${ant.project.name}_fitnesse.jar" />

	<property name="build.fitnesse.home" value="${basedir}/build/fitnesse" />
	<property name="build.fitnesse.root" value="${build.fitnesse.home}/${fitnesse.root.name}" />
	<property name="build.fitnesse.test.root" value="${build.fitnesse.root}/${fitnesse.path}" />

	<path id="project.classpath">
		<pathelement location="${resources}" />
		<fileset dir="${lib}">
			<include name="**/*.jar" />
		</fileset>
	</path>

	<path id="test.classpath">
		<path refid="project.classpath" />
		<pathelement location="${build}/classes/main" />
		<pathelement location="${build}/classes/unit" />
	</path>

	<target name="full" depends="clean, package, fitnesse-test, dist" />

	<target name="init">
		<mkdir dir="${build}" />
		<mkdir dir="${reports}" />
	</target>

	<target name="clean">
		<delete dir="${build}" />
		<delete dir="${dist}" />
	</target>

	<target name="compile" depends="init">
		<mkdir dir="${build}/classes/main" />
		<javac includes="**/*.java" debug="${build.debug}" destdir="${build}/classes/main" target="${build.target}">
			<src path="${src}" />
			<classpath refid="project.classpath" />
		</javac>
	</target>

	<target name="test" depends="compile">
		<mkdir dir="${build}/classes/unit" />
		<mkdir dir="${reports}/unit" />
		<javac debug="${build.debug}" destdir="${build}/classes/unit" target="${build.target}">
			<classpath refid="test.classpath" />
			<src path="${src.unit}" />
			<include name="**/*.java" />
		</javac>
		<junit errorproperty="test.failed">
			<classpath refid="test.classpath" />
			<formatter type="plain" />
			<batchtest fork="yes" todir="${reports}/unit">
				<fileset dir="${src.unit}">
					<include name="**/*Test.java" />
				</fileset>
			</batchtest>
		</junit>
		<fail if="test.failed" />
	</target>

	<target name="compile-cat" depends="compile">
		<mkdir dir="${build}/classes/cat" />
		<javac includes="**/*.java" debug="${build.debug}" target="${build.target}" destdir="${build}/classes/cat">
			<src path="${src.cat}" />
			<classpath refid="test.classpath" />
		</javac>
	</target>

	<target name="package" depends="compile,compile-cat">
		<jar destfile="${restfixture.jar}" basedir="${build}/classes/main" includes="**/*" />
		<jar destfile="${restfixture.fitnesse.jar}" basedir="${build}/classes/cat" includes="**/*" excludes="**/*.jar" />
	</target>

	<target name="fitnesse-copy" depends="package">
		<delete dir="${fitnesse.test.root}" />
		<mkdir dir="${fitnesse.test.root}/lib" />
		<copy todir="${fitnesse.test.root}/lib" flatten="true">
			<fileset dir="build">
				<include name="*.jar" />
			</fileset>
			<fileset dir="lib">
				<include name="**/*.jar" />
				<exclude name="${libs.excluded}"/>
			</fileset>
			<fileset dir="${resources}">
				<include name="**/*.*" />
			</fileset>
		</copy>
		<copy todir="${fitnesse.test.root}" overwrite="true">
			<filterset>
				<filter token="FITNESSE_HOME" value="${fitnesse.home}" />
				<filter token="FITNESSE_TEST_ROOT" value="${fitnesse.test.root}" />
				<filter token="TEMP_DIRECTORY" value="${tmpdir}" />
			</filterset>
			<fileset dir="src/${fitnesse.root.name}/${fitnesse.path}" />
		</copy>
	</target>

	<target name="fitnesse-deploy-remote" depends="package">
		<property name="remote.fitnesse.root" value="${fitnesse.root}" />
		<antcall target="fitnesse-copy">
			<param name="fitnesse.root" value="${fitnesse.home}/${fitnesse.root.name}" />
			<param name="fitnesse.test.root" value="${remote.fitnesse.root}/${fitnesse.path}" />
			<param name="libs.excluded" value="**/fitnesse.jar" />
		</antcall>
	</target>

	<target name="fitnesse-deploy" depends="package">
		<antcall target="fitnesse-copy">
			<param name="fitnesse.root" value="${build.fitnesse.home}/${fitnesse.root.name}" />
			<param name="fitnesse.test.root" value="${build.fitnesse.test.root}" />
			<param name="libs.excluded" value="" />
		</antcall>
		<!-- for local execution with in-process runner we need the fitnesse resources to be available -->
		<mkdir dir="${build}/fitnesse.extract" />
		<unzip dest="${build}/fitnesse.extract" src="${fitnesse.jar}" >
			<patternset>
				<include name="Resources/FitNesseRoot/files/**/*.*" />
			</patternset>
		</unzip>
		<copy todir="${build.fitnesse.home}/${fitnesse.root.name}">
			<!-- this should reflect the internal fitnesse.jar structure -->
			<fileset dir="${build}/fitnesse.extract/Resources/FitNesseRoot" />
		</copy>
		<delete dir="${build}/fitnesse.extract"/>
	</target>

	<target name="fitnesse-test-remote" depends="fitnesse-deploy-remote,fitnesse-exec-test,check.fitnesse.failure,check.fitnesse.report.failure" if="execute.cat" />

	<target name="fitnesse-test" depends="fitnesse-deploy,fitnesse-exec-test,check.fitnesse.failure,check.fitnesse.report.failure" if="execute.cat" />

	<target name="check.fitnesse.failure" if="fitnesse.fail">
		<fail message="FitNesse tests failed (# of failed tests: ${number.of.failed.tests}), see reports in '${fitnesse.reports}/results_sanitised.html' for details." />
	</target>

	<target name="check.fitnesse.report.failure" if="fitnesse.report.fail">
		<fail message="FitNesse tests report creation failed (exit status: ${fitnesse.report.exit.status}), see reports in '${fitnesse.reports}/results.html' for a non sanitised version of the report." />
	</target>

	<target name="fitnesse-exec-test" if="execute.cat">
		<property name="fitnesse.suite.root" value="${fitnesse.test.suite}" />
		<mkdir dir="${fitnesse.reports}" />
		<java jar="${fitnesse.jar}" failonerror="false" fork="true" output="${fitnesse.reports}/results.html" resultproperty="number.of.failed.tests">
			<arg value="-c" />
			<arg value="${fitnesse.suite.root}?suite&amp;format=html" />
			<arg value="-p" />
			<arg value="${fitnesse.port}" />
			<arg value="-r" />
			<arg value="${fitnesse.root.name}" />
			<arg value="-d" />
			<arg value="build/fitnesse" />
		</java>
		<condition property="fitnesse.fail">
			<equals arg1="0" arg2="number.of.failed.tests" />
		</condition>
		<java classname="smartrics.rest.support.fitnesse.FitnesseResultSanitiser" failonerror="true" fork="true" resultproperty="fitnesse.report.exit.status">
            <classpath location="${restfixture.fitnesse.jar}" />
            <classpath refid="project.classpath" />
			<arg value="${fitnesse.reports}/results.html" />
			<arg value="${build.fitnesse.root}" />
		</java>
		<condition property="fitnesse.report.fail">
			<equals arg1="0" arg2="fitnesse.report.exit.status" />
		</condition>
	</target>


	<target name="dist-doc" if="execute.cat">
		<!-- distributable docs -->
		<property name="docs.html.file" value="${artifacts}/docs/RestFixture-${version}.html" />
		<copy tofile="${docs.html.file}" file="${reports}/fitnesse/results.html" failonerror="false" />

		<copy todir="${artifacts}/docs" flatten="true">
			<fileset dir="${fitnesse.reports}" includes="**/*.*" excludes="results.*" />
		</copy>
		<copy todir="${artifacts}/docs">
			<fileset dir="${fitnesse.root.name}" includes="**/*.gif" />
			<fileset dir="${fitnesse.reports.resources}" includes="**/*.*" />
		</copy>
		<replace file="${docs.html.file}" token="base href" value="ignore-base href" summary="true" />
		<replace file="${docs.html.file}" token="/files" value="files" summary="true" />
		<replace dir="${artifacts}/docs" token="/files/css/" value="" includes="**/*.css" summary="true" />

		<!-- live deployed docs file -->
		<property name="docs.html.live.file" value="${artifacts}/docs/RestFixture-live-${version}.html" />
		<copy tofile="${docs.html.live.file}" file="${reports}/fitnesse/results.html" failonerror="false" />

		<replace file="${docs.html.live.file}" token="base href" value="ignore-base href" summary="true" />
		<replace file="${docs.html.live.file}" token="/files" value="http://fitnesse.org/files" summary="true" />
		<replace file="${docs.html.live.file}" token="files/restfixture/" value="http://rest-fixture.googlecode.com/files/" summary="true" />

	</target>

	<target name="dist">
		<delete dir="${dist}" />
		<mkdir dir="${artifacts}" />
		<copy todir="${artifacts}" file="${build}/${ant.project.name}.jar" />
		<copy todir="${artifacts}" file="${build}/${ant.project.name}_fitnesse.jar" />
		<copy todir="${artifacts}/lib" flatten="true">
			<fileset dir="lib" includes="**/*.jar" excludes="test/**/*.jar, fitnesse/**/*.jar, log4j/**/*.jar" />
		</copy>
		<copy todir="${artifacts}/etc">
			<fileset dir="etc" includes="**/*.*" />
		</copy>
		<copy todir="${artifacts}" file="CHANGELOG" />
		<copy todir="${artifacts}" file="COPYING" />
		<copy todir="${artifacts}" file="COPYING.LESSER" />
		<copy todir="${artifacts}" file="COPYRIGHT" />
		<copy todir="${artifacts}" file="README" />
		<property file="version.properties" />
		<antcall target="dist-doc" />
		<zip destfile="dist/RestFixture-nodep-${version}.zip" basedir="${artifacts}" casesensitive="true" compress="true" includes="**/*" excludes="lib/**/*.jar" />
		<zip destfile="dist/RestFixture-${version}.zip" basedir="${artifacts}" casesensitive="true" compress="true" includes="**/*" />
		<zip destfile="dist/RestFixture-docs-${version}.zip" basedir="${artifacts}/docs" casesensitive="true" compress="true" includes="**/*" />
	</target>

</project>
